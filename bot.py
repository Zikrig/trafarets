import os
import logging
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, FSInputFile
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from config import BOT_TOKEN, ADMIN_ID, PDF_FOLDER, DATA_FOLDER

logging.basicConfig(level=logging.INFO)
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class AdminStates(StatesGroup):
    editing_welcome = State()
    editing_contact = State()
    editing_templates = State()
    adding_pdf = State()
    deleting_pdf = State()

def read_text_file(filename):
    try:
        with open(os.path.join(DATA_FOLDER, filename), 'r', encoding='utf-8') as f:
            return f.read()
    except FileNotFoundError:
        return f"–§–∞–π–ª {filename} –Ω–µ –Ω–∞–π–¥–µ–Ω"

def write_text_file(filename, content):
    with open(os.path.join(DATA_FOLDER, filename), 'w', encoding='utf-8') as f:
        f.write(content)

def get_pdf_files():
    return [f for f in os.listdir(PDF_FOLDER) if f.endswith('.pdf')]

def create_main_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìû –°–≤—è–∑—å —Å –∞–¥–º–∏–Ω–æ–º", callback_data="contact")],
        [InlineKeyboardButton(text="üìÑ –®–∞–±–ª–æ–Ω—ã", callback_data="templates")]
    ])

def create_admin_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ", callback_data="edit_welcome")],
        [InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã", callback_data="edit_contact")],
        [InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–æ–≤", callback_data="edit_templates")],
        [InlineKeyboardButton(text="üì§ –î–æ–±–∞–≤–∏—Ç—å PDF", callback_data="add_pdf")],
        [InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å PDF", callback_data="delete_pdf")],
        [InlineKeyboardButton(text="‚ùå –ó–∞–∫—Ä—ã—Ç—å –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="close_admin")]
    ])

def create_pdf_delete_keyboard():
    files = get_pdf_files()
    keyboard = []
    for file in files:
        keyboard.append([InlineKeyboardButton(text=f"üóëÔ∏è {file}", callback_data=f"delete_{file}")])
    keyboard.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_admin")])
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

@dp.message(Command("start"))
async def start_handler(message: types.Message):
    welcome_text = read_text_file("welcome.txt")
    await message.answer(welcome_text, reply_markup=create_main_keyboard())

@dp.message(Command("admin"))
async def admin_handler(message: types.Message):
    if str(message.from_user.id) not in ADMIN_ID:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    await message.answer("–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=create_admin_keyboard())

@dp.callback_query(F.data == "contact")
async def contact_handler(callback: types.CallbackQuery):
    contact_text = read_text_file("contact.txt")
    await callback.message.answer(contact_text)
    await callback.answer()

@dp.callback_query(F.data == "templates")
async def templates_handler(callback: types.CallbackQuery):
    templates_text = read_text_file("templates.txt")
    files = get_pdf_files()
    
    if not files:
        await callback.message.answer("–®–∞–±–ª–æ–Ω—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
        return
    
    await callback.message.answer(templates_text)
    
    for file in files:
        file_path = os.path.join(PDF_FOLDER, file)
        await callback.message.answer_document(
            FSInputFile(file_path),
            caption=f"üìÑ {file}"
        )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
@dp.callback_query(F.data == "edit_welcome")
async def edit_welcome_handler(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è:")
    await state.set_state(AdminStates.editing_welcome)
    await callback.answer()

@dp.callback_query(F.data == "edit_contact")
async def edit_contact_handler(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤:")
    await state.set_state(AdminStates.editing_contact)
    await callback.answer()

@dp.callback_query(F.data == "edit_templates")
async def edit_templates_handler(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–æ–≤:")
    await state.set_state(AdminStates.editing_templates)
    await callback.answer()

@dp.callback_query(F.data == "add_pdf")
async def add_pdf_handler(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ PDF-—Ñ–∞–π–ª –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:")
    await state.set_state(AdminStates.adding_pdf)
    await callback.answer()

@dp.callback_query(F.data == "delete_pdf")
async def delete_pdf_handler(callback: types.CallbackQuery):
    files = get_pdf_files()
    if not files:
        await callback.message.answer("–ù–µ—Ç —Ñ–∞–π–ª–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
        return
    
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=create_pdf_delete_keyboard())
    await callback.answer()

@dp.callback_query(F.data.startswith("delete_"))
async def delete_specific_pdf_handler(callback: types.CallbackQuery):
    filename = callback.data.replace("delete_", "")
    file_path = os.path.join(PDF_FOLDER, filename)
    
    try:
        os.remove(file_path)
        await callback.message.answer(f"–§–∞–π–ª {filename} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω")
        await callback.message.edit_reply_markup(reply_markup=create_pdf_delete_keyboard())
    except Exception as e:
        await callback.message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")
    
    await callback.answer()

@dp.callback_query(F.data == "back_to_admin")
async def back_to_admin_handler(callback: types.CallbackQuery):
    await callback.message.edit_text("–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=create_admin_keyboard())
    await callback.answer()

@dp.callback_query(F.data == "close_admin")
async def close_admin_handler(callback: types.CallbackQuery):
    await callback.message.delete()
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π FSM
@dp.message(AdminStates.editing_welcome)
async def process_edit_welcome(message: types.Message, state: FSMContext):
    write_text_file("welcome.txt", message.text)
    await message.answer("–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω!")
    await state.clear()

@dp.message(AdminStates.editing_contact)
async def process_edit_contact(message: types.Message, state: FSMContext):
    write_text_file("contact.txt", message.text)
    await message.answer("–¢–µ–∫—Å—Ç –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω!")
    await state.clear()

@dp.message(AdminStates.editing_templates)
async def process_edit_templates(message: types.Message, state: FSMContext):
    write_text_file("templates.txt", message.text)
    await message.answer("–û–ø–∏—Å–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")
    await state.clear()

@dp.message(AdminStates.adding_pdf, F.document)
async def process_add_pdf(message: types.Message, state: FSMContext):
    if not message.document.mime_type == "application/pdf":
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ PDF-—Ñ–∞–π–ª")
        return
    
    file_id = message.document.file_id
    file = await bot.get_file(file_id)
    file_path = file.file_path
    filename = message.document.file_name
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
    destination = os.path.join(PDF_FOLDER, filename)
    await bot.download_file(file_path, destination)
    
    await message.answer(f"–§–∞–π–ª {filename} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
    await state.clear()

if __name__ == "__main__":
    # –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞–ø–∫–∏, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    os.makedirs(DATA_FOLDER, exist_ok=True)
    os.makedirs(PDF_FOLDER, exist_ok=True)
    
    # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    default_files = {
        "welcome.txt": "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! üéâ\n\n–≠—Ç–æ –±–æ—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —à–∞–±–ª–æ–Ω–∞–º–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –æ–ø—Ü–∏—é:",
        "contact.txt": "–°–≤—è–∑—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º: @username_admin\n\n–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –Ω–∞–ø—Ä—è–º—É—é!",
        "templates.txt": "–î–æ—Å—Ç—É–ø–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:"
    }
    
    for filename, content in default_files.items():
        if not os.path.exists(os.path.join(DATA_FOLDER, filename)):
            write_text_file(filename, content)
    
    dp.run_polling(bot)